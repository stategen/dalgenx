<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>
        可以自己可以在dalgenX下建立一个gen.custom.xml的用户全局设置，加载顺序 gen.xml==>gen.custom.xml==>gen_config.xml,后加载的内容有效
        代码生成器配置文件:
        1.会为所有的property生成property_dir属性,如pkg=com.company => pkg_dir=com/company
    </comment>
    <!--有些系统把date按long存到数据库,本转换开关表示是否在pojo内使用date -->
    <entry key="date_long_field_to_date">true</entry>
    <!-- 生成 select时包括 create_date_field -->
    <entry key="gen_select_create_date_field">true</entry>
    <entry key="gen_select_update_date_field">true</entry>
    <entry key="gen_select_delete_flag_field">true</entry>

    <!-- 在className前增加一个非法字符?阻止生成dal,除非大小写驼峰写法校验完毕，该功能可解决windows文件名不区分的大小写的问题 -->
    <entry key="add_illegal_prefix">true</entry>

    <!-- 指定包名 -->
    <entry key="packageName">${packageName}</entry>

    <!-- 模块，用于dal层sqlmap及spring配置文件的划分 -->
    <entry key="systemName">${systemName?uncap_first}</entry>

    <!-- 各层生成到哪个目录下，如果为空，表示同一个目录 -->
    <!-- 本项目中 pojo与dto放入一个工程内 -->
    <entry key="pojo_module_name">${FoldUtil.get(1,systemName)}-pojo</entry>
    <!-- <entry key="dto_module_name">${FoldUtil.get(1,systemName)}-pojo</entry> -->
    <entry key="facade_module_name">${FoldUtil.get(2,systemName)}-facade</entry>
    <entry key="dao_module_name">${FoldUtil.get(4,systemName)}-dao</entry>
    <entry key="service_module_name">${FoldUtil.get(5,systemName)}-service</entry>
    <entry key="controller_module_name">${FoldUtil.get(6,systemName)}-web-base</entry>


    <entry key="pojo_dir_name">domain</entry>



    <!-- 需要移除的表名前缀,使用逗号进行分隔多个前缀,示例值: t_,v_ -->
    <entry key="tableRemovePrefixes">br_,demo_</entry>
    <entry key="lombok">true</entry>

    <entry key="mybatisTypeHandlers">
    <![CDATA[ 
      <typeHandlers>
        <!-- <typeHandler javaType="java.util.Date" handler="org.stategen.framework.mybatis.DateTypeHandler"/> -->
      </typeHandlers>  
    ]]>    
    </entry>
    <entry key="ibatisTypeHandlers">
    <![CDATA[ 
    <!-- 
    <typeHandler javaType="com.iwallet.biz.common.util.money.Money" callback="com.alipay.common.ibatis.typehandler.MoneyTypeHandler"/>
    -->
    <typeHandler javaType="java.util.Currency" callback="org.stategen.framework.ibatis.typehandler.CurrencyHandlerCallback"/>
    <typeHandler javaType="java.util.Date" callback="org.stategen.framework.ibatis.typehandler.DateTypehandlerCallBack"/>
    <typeHandler javaType="[B" jdbcType="LONGVARBINARY" callback="org.springframework.orm.ibatis.support.BlobByteArrayTypeHandler" />
    ]]>
    </entry>


    <!-- Mysql -->
    <!-- 数据库相关配置 -->
    <entry key="jdbc_url">jdbc:mysql://localhost:3306/${systemName?uncap_first}?useUnicode=true</entry>
    <entry key="jdbc_driver">com.mysql.jdbc.Driver</entry>

    <entry key="jdbc_username">stategen</entry>
    <entry key="jdbc_password">stategen</entry>
    
    <!-- ibatis,mybatis,最下面覆盖上面，最下面优先 ，修改顺序后，需要重新运行一次 ./dalbatch.sh 批量生成-->
    <entry key="dao_type">mybatis</entry>
    <entry key="dao_type">ibatis</entry>
    <!-- 如果表有水平权限(-level(orgnization|树型级别表),-owner(user|所有者表))，下面属生为true,必须提示水平权限参数，否则更不了 -->
    <entry key="forceUseLevelAuthorForWrite">true</entry>
    
    <!-- 生成文件夹时，数字的样式， numHeader(1-trade-pojo)，numMid(trade-1-pojo)， numNone(trade-pojo) ,默认numMid,没有配置是 numHeader -->
    《#-- 与老系统兼容，没有配置的情况下，新工程初始化时生成 numMid-->
	<entry key="foldNumberType">${foldNumberType:numMid}</entry>
</properties>