/*
 * Do not remove this unless you get business authorization.
 * Copyright (c) 2016 - 2018 All Rights Reserved.
 * Powered By [stategen.dalgen]
 */
package ${packageName}.service.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Function;
import javax.annotation.Resource;

import org.stategen.framework.lite.PageList;
import org.stategen.framework.util.CollectionUtil;
import org.stategen.framework.util.StringUtil;

import ${packageName}.dao.RegionDao;
import ${packageName}.domain.Region;
import ${packageName}.service.RegionService;

/**
 * RegionServiceImpl
 * <pre>
 * database table: region
 * database table comments: Region
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 *
 * 新生成的类中的方法，只有在不同名的情况下才会被追加到该类下，
 * 因此该类可以修改任何部分
 * </pre>
 */
public class RegionServiceImpl implements RegionService {

    /**
     * 
     * @see ${packageName}.dao.RegionDao#getRegionByRegionId
     * 
     * @see ${packageName}.service.RegionService#getRegionByRegionId
     */
    @Override
    public Map<Long, Region> getRegionMapIfHasParent(List<Long> regionIds) {
        if (CollectionUtil.isEmpty(regionIds)) {
            return CollectionUtil.newEmptyMap();
        }
        List<Region> regions = this.getRegionsWithIsLeafByRegionIds(regionIds);
        Map<Long, Region> allRegoinMap = CollectionUtil.toMap(regions, Region::getRegionId);
        while (CollectionUtil.isNotEmpty(regions)) {
            Set<Long> parentRegionIdSet = CollectionUtil.toSet(regions, Region::getParentRegionId);
            regions = this.getRegionsWithIsLeafByRegionIds(new ArrayList<Long>(parentRegionIdSet));
            CollectionUtil.toMap(allRegoinMap, regions, Region::getRegionId);
        }
        return allRegoinMap;
    }

    //<#--
    @Resource(name = "regionDao")
    RegionDao regionDao;

    /**
     * 
     * @see ${packageName}.dao.RegionDao#insert
     * @see ${packageName}.service.RegionService#insert
     */
    @Override
    public Region insert(Region region) {
        return regionDao.insert(region);
    }

    /**
     * 
     * @see ${packageName}.dao.RegionDao#delete
     * @see ${packageName}.service.RegionService#delete
     */
    @Override
    public Long delete(Long regionId) {
        return regionDao.delete(regionId);
    }

    /**
     * 
     * @see ${packageName}.dao.RegionDao#update
     * @see ${packageName}.service.RegionService#update
     */
    @Override
    public Region update(Region region) {
        return regionDao.update(region);
    }

    /**
     * 
     * @see ${packageName}.dao.RegionDao#getRegionByRegionId
     * @see ${packageName}.service.RegionService#getRegionByRegionId
     */
    @Override
    public Region getRegionByRegionId(Long regionId) {
        return regionDao.getRegionByRegionId(regionId);
    }

    /**
     * 
     * @see ${packageName}.dao.RegionDao#getRegionPageList
     * @see ${packageName}.service.RegionService#getRegionPageList
     */
    @Override
    public PageList<Region> getRegionPageList(Region region, int pageSize, int pageNum) {
        return regionDao.getRegionPageList(region, pageSize, pageNum);
    }

    /**
     * 
     * @see ${packageName}.dao.RegionDao#getRegionsByRegionIds
     * @see ${packageName}.service.RegionService#getRegionsByRegionIds
     */
    @Override
    public List<Region> getRegionsByRegionIds(java.util.List<Long> regionIds) {
        return regionDao.getRegionsByRegionIds(regionIds);
    }

    /**
     * 
     * @see ${packageName}.dao.RegionDao#deleteByRegionIds
     * @see ${packageName}.service.RegionService#deleteByRegionIds
     */
    @Override
    public java.util.List<Long> deleteByRegionIds(java.util.List<Long> regionIds) {
        return regionDao.deleteByRegionIds(regionIds);
    }

    /*** 保存region,有id时更新，没有id时插入,并带回新的id，返回 region*/
    @Override
    public Region saveRegion(Region region) {
        if (region != null) {
            java.lang.Long regionId = region.getRegionId();
            if (regionId != null) {
                insert(region);
            } else {
                update(region);
            }
        }
        return region;
    }

    /*** 批量保存regions,有id时更新，没有id时插入,并带回新的id，返回 regions*/
    @Override
    public List<Region> saveRegions(List<Region> regions) {
        for (Region region : regions) {
            this.saveRegion(region);
        }
        return regions;
    }



    /**
     * 
     * @see ${packageName}.dao.RegionDao#getRegionOptions
     * @see ${packageName}.service.RegionService#getRegionOptions
     */
    @Override
    public List<Region> getRegionOptions(List<Long> parentRegionIds) {
        return regionDao.getRegionOptions(parentRegionIds);
    }

    /**
     * 
     * @see ${packageName}.dao.RegionDao#getRegionsWithIsLeafByRegionIds
     * @see ${packageName}.service.RegionService#getRegionsWithIsLeafByRegionIds
     */
    @Override
    public List<Region> getRegionsWithIsLeafByRegionIds(java.util.List<Long> regionIds) {
        return regionDao.getRegionsWithIsLeafByRegionIds(regionIds);
    }
    //-->
    //
}
