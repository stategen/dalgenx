<?xml version="1.0" encoding="UTF-8"?>
<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:noNamespaceSchemaLocation="http://www.padual.com/java/logback.xsd" scan="true" scanPeriod="60 seconds" debug="false">  
    <!-- 读取 war包中classpath下属性 -->
    <property resource="application.properties"/>
    <!-- 定义日志文件 输入位置 -->  
    
    <property name="logPathPrefix" value="/opt/logs/%d{MMyyyy}/${'${'}project.name}/"/>
    <property name="logSubfix" value="_${'${'}project.name}_%d{yyyy-MM-dd}_${'${'}THIS_IP}_${'${'}HOSTNAME}.log"/>
    <property name="pattern" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger%n%msg%n%caller{10}"></property>
    
    <!-- 日志最大的历史 30天 -->  
    <property name="maxHistory" value="30"/>  
  
    <!-- ConsoleAppender 控制台输出日志 -->  
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">  
        <!-- 对日志进行格式化 -->  
        <encoder>  
            <pattern><![CDATA[%d{HH:mm:ss.SSS} [%thread] %-5level %logger%n%msg%n%caller{10}]]></pattern>  
        </encoder>  
    </appender>  
      
      
    <!-- ERROR级别日志 -->  
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->  
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <!-- 过滤器，只记录WARN级别的日志 -->  
        <filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>ERROR</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter>  
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <!--日志输出位置  可相对、和绝对路径 -->  
            <fileNamePattern>${'${'}logPathPrefix}error${'${'}logSubfix}
            </fileNamePattern>  
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6，  
            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除-->  
            <maxHistory>${'${'}maxHistory}</maxHistory>  
        </rollingPolicy>  
          
        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。   
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">     
          <fileNamePattern>${'${'}logDir}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern>     
          <minIndex>1</minIndex>     
          <maxIndex>3</maxIndex>     
        </rollingPolicy>   -->  
        <!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动   
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">     
            <maxFileSize>5MB</maxFileSize>     
        </triggeringPolicy>   -->  
          
        <encoder>  
            <pattern>${'${'}pattern}</pattern> 
        </encoder>  
    </appender>  
      
      
      
    <!-- WARN级别日志 appender -->  
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <!-- 过滤器，只记录WARN级别的日志 -->  
        <filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>WARN</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <!-- 按天回滚 daily -->  
            <fileNamePattern>${'${'}logPathPrefix}warn${'${'}logSubfix}
            </fileNamePattern>  
            <!-- 日志最大的历史 -->  
            <maxHistory>${'${'}maxHistory}</maxHistory>  
        </rollingPolicy>  
        <encoder>  
            <pattern>${'${'}pattern}</pattern> 
        </encoder>  
    </appender>  
      
      
    <!-- INFO级别日志 appender -->  
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <!-- 过滤器，只记录INFO级别的日志 -->  
        <filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>INFO</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <!-- 按天回滚 daily -->  
            <fileNamePattern>${'${'}logPathPrefix}info${'${'}logSubfix}
            </fileNamePattern>  
            <!-- 日志最大的历史 -->  
            <maxHistory>${'${'}maxHistory}</maxHistory>  
        </rollingPolicy>  
        <encoder>  
            <pattern>${'${'}pattern}</pattern>  
        </encoder>  
    </appender>  
      
    <!-- DEBUG级别日志 appender -->  
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <!-- 过滤器，只记录DEBUG级别的日志 -->  
        <filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>DEBUG</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <!-- 按天回滚 daily -->  
            <fileNamePattern>${'${'}logPathPrefix}debug${'${'}logSubfix} 
            </fileNamePattern>  
            <!-- 日志最大的历史-->  
            <maxHistory>${'${'}maxHistory}</maxHistory>  
        </rollingPolicy>  
        <encoder>  
            <pattern>${'${'}pattern}</pattern> 
        </encoder>  
    </appender>  
      
      
    <!-- TRACE级别日志 appender -->  
    <appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <!-- 过滤器，只记录ERROR级别的日志 -->  
        <filter  class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>TRACE</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <!-- 按天回滚 daily -->  
            <fileNamePattern>${'${'}logPathPrefix}trace${'${'}logSubfix}
            </fileNamePattern>  
            <!-- 日志最大的历史 -->  
            <maxHistory>${'${'}maxHistory}</maxHistory>  
        </rollingPolicy>  
        <encoder>  
            <pattern>${'${'}pattern}</pattern>  
        </encoder>  
    </appender>  
  
    <logger name="java.sql" level="DEBUG" />  
    <logger name="java.sql.PreparedStatement" value="DEBUG" />    
    <logger name="java.sql.Connection" value="WARN" />    
    <logger name="java.sql.Statement" value="WARN" />  
    <logger name="java.sql.ResultSet" level="WARN"/> 

    <logger name="com.ibatis" level="DEBUG" />    
    <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG" />    
    <logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG"/>    
    <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG" />  
    <logger name="com.ibatis.common.jdbc.logging.ResultSetLogProxy" level="DEBUG" />   

    <logger name="org.springframework" level="WARN"/>
    <logger name="org.springframework.web" level="DEBUG"/>
    <logger name="com.opensymphony" level="WARN"/>
    <logger name="org.apache" level="WARN"/>
    <logger name="org.hibernate" level="WARN"/>
    <logger name="net.sf.ehcache" level="WARN"/>
    <logger name="org.quartz" level="WARN"/>
    <logger name="springfox.documentation" level="WARN"/>

    <logger name="freemarker" level="INFO"/>
      
    <!-- root级别   DEBUG -->  
    <root level="debug">  
        <!-- 控制台输出 -->  
        <appender-ref ref="STDOUT" />  
        <!-- 文件输出 -->  
        <appender-ref ref="ERROR" />  
        <appender-ref ref="INFO" />  
        <appender-ref ref="WARN" />  
        <!-- <appender-ref ref="DEBUG" />   -->
        <!-- <appender-ref ref="TRACE" /> -->  
    </root>  
</configuration>  