resultClass=java.math.BigDecimal ok
resultClass=object ok
insert 空格优化
parameterClass=List<>
multiplicity="many" one page
it 直接带入 List<Object>查询
+参数 可以让Count生成到Dao和Service
paramType="object"时分页有问题
countService时去掉pageNum,pageSize
能够传入Set<T>
多表查询默认当前类
paging统一放入Mult
将, and 放入字段前，不在动态内 ????
CollectionUtil.isEmpty 做 it~check属性,可能做不了
批量保存,批量插入
order by error 具体看 item.xml

dual 处理
isNotEmpty等如果遇到参数和字段相同，property 属性不要
@ApiModelProperty 在下次创建时覆盖

getById改为具体名称

react abstract
  model 中 command调后面
  检查 queryRule有没有多余
  用list还是valueMap
  没有id的bean,变为list
  page??pageNum
  final int DEFAULT_PAGE_NUM =1;
  final int DEFAULT_PAGE_SIZE =10;
  返回置是List 测一下 ${arrayPrefix(fun)}${resultName}${doPageList(fun)}${arraySubfix(fun)} : []
联合 Unique

我讨厌的事
1.DTO：一迭代就全是convert数据的坑
2.充血模式下的pojo：我觉得业务就应该在业务代码里，不应该在领域模型里
3.一套以上的代码具有crud同一张表的功能：业务每次迭代，需要同时修改涉及的代码，它们在不同的库里，有可能你忘了或不知道在哪里改，或者知道在哪里改，但代码不在你团队手上,求天地求地都没用
4.前后端代码逻辑上分离：前后端分离不可怕，前后端代码逻辑上的分离才可怕，效率代下，人工交互，一升级，各种锅
5.不够垂直的架构：我需的垂直，从上往下看的通透，无论我什么入伙团队，我能很快的清楚我的代码都在干什么，假如出现问题，我能快速排查
6.牛B一堆，但各种基础代码手工参写编写，特别是基础代码，比较修改字段，涉及面越广，就容易出错或忘记
7.不站在全栈角度考虑的架构。要知道最最终交付的产品是一个前、后、运营端相互配后的产品。架构角度多大，决定能罩到多远，罩不的地方，出了问题，锅来了